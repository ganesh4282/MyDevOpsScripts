---
AWSTemplateFormatVersion: '2010-09-09'
Description: "This CloudFormation template creates a Web Instance thru ASG and attach the instances to Classic load balancer. Update Route53 record set with Classic Load balancer dns. It uses the vpc-aws-cft stack VPC and Subnet exports"
Mappings:
    Region2AMIMap:
      us-east-1:
        ubuntu: "ami-0a313d6098716f372"
      eu-west-1:
        ubuntu: "ami-xxxxxxxx"       
      ap-southeast-2:
        ubuntu: "ami-xxxxxxxx"
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Instance Parameters"        
        Parameters:
          - KeyPair
          - TerminationPolicy
      -
        Label: 
          default: "Other Parameters"
        Parameters:
          - Environment
          - NetworkStackName
          - HostedZone
Parameters:
    NetworkStackName:
        Description: Name of an active CloudFormation stack that contains the networking resources.
        Type: String
        AllowedPattern: "^[a-zA-Z][-a-zA-Z0-9]*$"
        Default: NetworkStack
    KeyPair:
        Description: EC2 KeyPair
        Type: AWS::EC2::KeyPair::KeyName
        ConstraintDescription: Existing EC2 KeyPair.
    TerminationPolicy:
       Description: Choose EC2 Termination Policy
       Type: String
       Default: False
       AllowedValues: 
        - True
        - False
    Environment:
       Description: To set the route53 Record Set
       Type: String
       Default: dev
    HostedZone:
       Description: Route53 Hosted Zone
       Type: String
       Default: mylabexample.net.       
Resources:
    WebEC2SecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupName: !Join ["-",["Ref": "AWS::StackName", !Ref 'Environment', "web"]]
        GroupDescription: !Join ["-",["Ref": "AWS::StackName", !Ref 'Environment', "web"]]
        SecurityGroupIngress:
         - IpProtocol: tcp
           FromPort: '22'
           ToPort: '22'
           CidrIp: 0.0.0.0/0 
         - IpProtocol: tcp
           FromPort: '443'
           ToPort: '443'
           CidrIp: 0.0.0.0/0 
         - IpProtocol: tcp
           FromPort: '80'
           ToPort: '80'
           CidrIp: 0.0.0.0/0             
        SecurityGroupEgress:
         - IpProtocol: '-1'
           CidrIp: 0.0.0.0/0
        VpcId:
          Fn::ImportValue:
            Fn::Sub: "${NetworkStackName}-VPCID"
        Tags:
         - Key: "Name"
           Value: !Join ["-",["Ref": "AWS::StackName", !Ref 'Environment', "web"]]
    WebELBSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupName: !Join ["-",["Ref": "AWS::StackName", "web-elb"]]
        GroupDescription: !Join ["-",["Ref": "AWS::StackName", !Ref 'Environment', "web-elb"]]
        SecurityGroupIngress:
         - IpProtocol: tcp
           FromPort: '80'
           ToPort: '80'
           CidrIp: 0.0.0.0/0             
        SecurityGroupEgress:
         - IpProtocol: '-1'
           CidrIp: 0.0.0.0/0
        VpcId:
          Fn::ImportValue:
            Fn::Sub: "${NetworkStackName}-VPCID"
        Tags:
         - Key: "Name"
           Value: !Join ["-",["Ref": "AWS::StackName", !Ref 'Environment', "web-elb"]]           
    WebRole: 
      Type: AWS::IAM::Role
      Properties:
        RoleName: !Join ["-",["Ref": "AWS::StackName", !Ref 'Environment', "web"]]
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Principal:
              Service:
              - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
        Path: "/"
        Policies:
         -        
            PolicyName: "EBSVolumePolicy"
            PolicyDocument:
                Version: "2012-10-17"
                Statement:
                  - 
                    Effect: "Allow"
                    Action: 
                     - "ec2:DescribeInstances"
                     - "ec2:DescribeVolumes"                     
                     - "ec2:ModifyVolumeAttribute"
                     - "ec2:CreateTags"                     
                     - "ec2:AttachVolume"
                     - "ec2:CreateVolume"
                    Resource: "*"                     
        ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
    WebInstanceProfile:
      Type: "AWS::IAM::InstanceProfile"
      Properties:
        Roles: 
          - Ref: WebRole    
    WebClassicLoadBalancer:
      Type: "AWS::ElasticLoadBalancing::LoadBalancer"
      Properties:
        LoadBalancerName: !Join ["-",["Ref": "AWS::StackName", !Ref 'Environment', "web"]]
        SecurityGroups: 
          - Ref: WebELBSecurityGroup
        Subnets: 
          - {'Fn::ImportValue': !Sub '${NetworkStackName}-PubSubnet1'}
          - {'Fn::ImportValue': !Sub '${NetworkStackName}-PubSubnet2'}
          - {'Fn::ImportValue': !Sub '${NetworkStackName}-PubSubnet3'}        
        CrossZone: True
        ConnectionDrainingPolicy:
            Enabled: 'true'
            Timeout: '300'
        Tags:
         - Key: "Name"
           Value: !Join ["-",["Ref": "AWS::StackName", !Ref 'Environment', "web"]]             
        Listeners:
          - LoadBalancerPort: '80'
            InstancePort: '80'
            Protocol: TCP
        HealthCheck:
           Target: HTTP:80/healthcheck.html
           HealthyThreshold: '5'
           UnhealthyThreshold: '2'
           Interval: '30'
           Timeout: '5'
    WebLaunchConfig:
        Type: AWS::AutoScaling::LaunchConfiguration
        Properties:
          LaunchConfigurationName: !Join ["-",["Ref": "AWS::StackName", !Ref 'Environment', "web-v1"]]
          KeyName: 
            Ref: KeyPair
          ImageId: !FindInMap
            - Region2AMIMap
            - !Ref 'AWS::Region'
            - ubuntu
          InstanceType: t2.micro
          AssociatePublicIpAddress: 'true'
          SecurityGroups:
           - Ref: WebEC2SecurityGroup
          IamInstanceProfile: 
             Ref: WebInstanceProfile         
          InstanceMonitoring: 'false' 
          UserData:
            Fn::Base64: !Sub |
             #!/bin/bash -ex
             sudo apt-get -y update
             sudo apt install python-pip -y
             sudo pip install --upgrade pip
             sudo pip install awscli
             instanceid=`curl http://169.254.169.254/latest/meta-data/instance-id` 
             sleep 60
             sudo snap install amazon-ssm-agent --classic
             sudo systemctl start snap.amazon-ssm-agent.amazon-ssm-agent.service
             sudo systemctl stop snap.amazon-ssm-agent.amazon-ssm-agent.service
             sudo snap start amazon-ssm-agent
             sudo apt install apache2 -y
             sudo ufw allow 'Apache'
             sudo systemctl start apache2
             echo "Health Check from $instanceid" | sudo tee /var/www/html/healthcheck.html 
             echo "It Works" | sudo tee /var/www/html/healthcheck.html                
    WebAutoScalingGroup:
        Type: AWS::AutoScaling::AutoScalingGroup    
        Properties:
          AutoScalingGroupName: !Join ["-",["Ref": "AWS::StackName", !Ref 'Environment', "web"]]        
          VPCZoneIdentifier:  
              - {'Fn::ImportValue': !Sub '${NetworkStackName}-PriSubnet1'}
              - {'Fn::ImportValue': !Sub '${NetworkStackName}-PriSubnet2'}
              - {'Fn::ImportValue': !Sub '${NetworkStackName}-PriSubnet3'}
          HealthCheckType: EC2
          HealthCheckGracePeriod: '300'
          LoadBalancerNames:
           - Ref: WebClassicLoadBalancer
          Cooldown: '300'
          LaunchConfigurationName: 
            Ref: WebLaunchConfig         
          MaxSize: '2'
          MinSize: '1'
          DesiredCapacity: '2'
          Tags:
           - Key: "Name"
             Value: !Join ["-",["Ref": "AWS::StackName", !Ref 'Environment', "web"]]       
             PropagateAtLaunch: 'true' 
           - Key: "Environment"
             Value: !Join ["-",[!Ref 'Environment']]                   
             PropagateAtLaunch: 'true' 
    DnsRecord:
      Type: AWS::Route53::RecordSet
      Properties:
        HostedZoneName: !Ref HostedZone
        RecordSets:
          - Name: !Join ['', [!Ref "AWS::StackName", "-web.", !Ref 'HostedZone']]
            Type: A 
            AliasTarget:
              HostedZoneId: !GetAtt WebClassicLoadBalancer.CanonicalHostedZoneNameID
              DNSName: !GetAtt WebClassicLoadBalancer.DNSName              
Outputs:
    StackELB:
      Description: Load Balancer Name
      Value: !Ref WebClassicLoadBalancer
      Export:
        Name: !Sub "${AWS::StackName}-elb"          
    StackELBDNS:
      Description: ELB DNS Endpoint
      Value: !GetAtt [WebClassicLoadBalancer, DNSName]
      Export:
        Name: !Sub "${AWS::StackName}-elbdns"  
    StackRecordSet:
      Description: Web URL
      Value: !Join ['', [http://, !Ref DnsRecord]]
      Export:
        Name: !Sub "${AWS::StackName}-web-url" 
