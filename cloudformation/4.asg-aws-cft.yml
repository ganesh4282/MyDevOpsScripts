---
AWSTemplateFormatVersion: '2010-09-09'
Description: "This CloudFormation template creates a simple instance thru ASG and uses the network input from vpc-aws-cft cloudformation stack"
Mappings:
    Region2AMIMap:
      us-east-1:
        ubuntu: "ami-0a313d6098716f372"
      eu-west-1:
        ubuntu: "ami-xxxxxxxx"       
      ap-southeast-2:
        ubuntu: "ami-xxxxxxxx"
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Instance Parameters"        
        Parameters:
          - KeyPair
      -
        Label: 
          default: "Other Parameters"
        Parameters:
          - Environment
          - NetworkStackName         
Parameters:
    NetworkStackName:
        Description: Name of an active CloudFormation stack that contains the networking resources.
        Type: String
        AllowedPattern: "^[a-zA-Z][-a-zA-Z0-9]*$"
        Default: NetworkStack
    KeyPair:
        Description: EC2 KeyPair
        Type: AWS::EC2::KeyPair::KeyName
        ConstraintDescription: Existing EC2 KeyPair.
    Environment:
       Description: To set the route53 Record Set
       Type: String
       Default: dev   
Resources:
    WebASGSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupName: !Join ["-",["Ref": "AWS::StackName", "web"]]
        GroupDescription: !Join ["-",["Ref": "AWS::StackName", "web"]]
        SecurityGroupIngress:
         - IpProtocol: tcp
           FromPort: '22'
           ToPort: '22'
           CidrIp: 0.0.0.0/0 
         - IpProtocol: tcp
           FromPort: '443'
           ToPort: '443'
           CidrIp: 0.0.0.0/0 
         - IpProtocol: tcp
           FromPort: '80'
           ToPort: '80'
           CidrIp: 0.0.0.0/0             
        SecurityGroupEgress:
         - IpProtocol: '-1'
           CidrIp: 0.0.0.0/0
        VpcId:
          Fn::ImportValue:
            Fn::Sub: "${NetworkStackName}-VPCID"
        Tags:
         - Key: "Name"
           Value: !Join ["-",["Ref": "AWS::StackName", "web"]]
    WebASGRole: 
      Type: AWS::IAM::Role
      Properties:
        RoleName: !Join ["-",["Ref": "AWS::StackName", "web"]]
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Principal:
              Service:
              - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
        Path: "/"
        Policies:
         -        
            PolicyName: "EBSVolumePolicy"
            PolicyDocument:
                Version: "2012-10-17"
                Statement:
                  - 
                    Effect: "Allow"
                    Action: 
                     - "ec2:DescribeInstances"
                     - "ec2:DescribeVolumes"                     
                     - "ec2:ModifyVolumeAttribute"
                     - "ec2:CreateTags"                     
                     - "ec2:AttachVolume"
                     - "ec2:CreateVolume"
                    Resource: "*"                     
        ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
    WebASGProfile:
      Type: "AWS::IAM::InstanceProfile"
      Properties:
        Roles: 
          - Ref: WebASGRole
    WebLaunchConfig:
        Type: AWS::AutoScaling::LaunchConfiguration
        Properties:
          LaunchConfigurationName: !Join ["-",["Ref": "AWS::StackName", "web-v1"]]
          KeyName: 
            Ref: KeyPair
          ImageId: !FindInMap
            - Region2AMIMap
            - !Ref 'AWS::Region'
            - ubuntu
          InstanceType: t2.micro
          AssociatePublicIpAddress: 'true'
          SecurityGroups:
           - Ref: WebASGSecurityGroup
          IamInstanceProfile: 
             Ref: WebASGProfile
          BlockDeviceMappings:
           - DeviceName: /dev/sdb
             Ebs:
               VolumeSize: '10'
               VolumeType: gp2
               DeleteOnTermination: true               
          InstanceMonitoring: 'false' 
          UserData:
            Fn::Base64: !Sub |
             #!/bin/bash -ex
             sudo apt-get -y update
             sudo apt install python-pip -y
             sudo pip install --upgrade pip
             sudo pip install awscli
             sleep 90
             sudo snap install amazon-ssm-agent --classic
             sudo systemctl start snap.amazon-ssm-agent.amazon-ssm-agent.service
             sudo systemctl stop snap.amazon-ssm-agent.amazon-ssm-agent.service
             sudo snap start amazon-ssm-agent
             sudo mkdir /mnt/temp
             echo -e "o\nn\np\n1\n\n\nw" | sudo fdisk /dev/xvdb
             sleep 60
             sudo mkfs -t ext4 /dev/xvdb1
             echo "/dev/xvdb1 /mnt/temp ext4 defaults 0 2" | sudo tee --append  /etc/fstab
             sudo mount -a
    WebAutoScalingGroup:
        Type: AWS::AutoScaling::AutoScalingGroup    
        Properties:
          AutoScalingGroupName: !Join ["-",["Ref": "AWS::StackName", "web"]]        
          VPCZoneIdentifier:  
              - {'Fn::ImportValue': !Sub '${NetworkStackName}-PubSubnet1'}
              - {'Fn::ImportValue': !Sub '${NetworkStackName}-PubSubnet2'}
              - {'Fn::ImportValue': !Sub '${NetworkStackName}-PubSubnet3'}
          HealthCheckType: EC2
          HealthCheckGracePeriod: '300'
          Cooldown: '300'
          LaunchConfigurationName: 
            Ref: WebLaunchConfig         
          MaxSize: '1'
          MinSize: '1'
          DesiredCapacity: '1'
          Tags:
           - Key: "Name"
             Value: !Join ["-",["Ref": "AWS::StackName", "web"]]       
             PropagateAtLaunch: 'true' 
           - Key: "Environment"
             Value: !Join ["-",[!Ref 'Environment']]                   
             PropagateAtLaunch: 'true'
